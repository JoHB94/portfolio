import{_ as r,C as l,c as n,o as e,ab as t,G as s}from"./chunks/framework.DIOtyC_h.js";const i="/mataju/Mataju_MVVM.png",u="/mataju/Mataju_%EB%9E%9C%EB%94%A9%ED%8E%98%EC%9D%B4%EC%A7%80.png",V=JSON.parse('{"title":"Mataju Client","description":"","frontmatter":{},"headers":[],"relativePath":"Mataju/MatajuClient/mataju.md","filePath":"Mataju/MatajuClient/mataju.md","lastUpdated":null}'),g={name:"Mataju/MatajuClient/mataju.md"};function m(d,a,M,h,c,j){const o=l("CarouselController");return e(),n("div",null,[a[0]||(a[0]=t('<h1 id="mataju-client" tabindex="-1">Mataju Client <a class="header-anchor" href="#mataju-client" aria-label="Permalink to &quot;Mataju Client&quot;">​</a></h1><hr><h2 id="내용" tabindex="-1">내용 <a class="header-anchor" href="#내용" aria-label="Permalink to &quot;내용&quot;">​</a></h2><h3 id="⬅️-slide-➡️" tabindex="-1">⬅️ SLIDE ➡️ <a class="header-anchor" href="#⬅️-slide-➡️" aria-label="Permalink to &quot;⬅️ SLIDE ➡️&quot;">​</a></h3>',4)),s(o,{category:"mataju"}),a[1]||(a[1]=t('<h3 id="핵심-기능" tabindex="-1">핵심 기능 <a class="header-anchor" href="#핵심-기능" aria-label="Permalink to &quot;핵심 기능&quot;">​</a></h3><ul><li><strong>로그인 페이지</strong>: JWT를 사용한 사용자 인증을 통한 로그인</li><li><strong>리스트 페이지</strong>: DB에 등록된 대여가능한 창고를 지점별로 조회</li><li><strong>디테일 페이지</strong>: 선택한 지점의 운영 정보와 운영 방침을 고객에게 알려줌</li><li><strong>창고 예약</strong>: 고객은 원하는 창고 사이즈와 기간을 입력하여 자동으로 산출된 금액을 기준으로 예약을 함</li></ul><hr><h3 id="🏛-mataju-mvvm-구조" tabindex="-1">🏛 <strong>Mataju MVVM 구조</strong> <a class="header-anchor" href="#🏛-mataju-mvvm-구조" aria-label="Permalink to &quot;🏛 **Mataju MVVM 구조**&quot;">​</a></h3><p><img src="'+i+'" alt="Mataju MVVM 아키텍처"></p><ul><li><p><strong>View (뷰)</strong></p><ul><li><strong>사용자 인터페이스(UI)를 담당</strong></li><li>ViewModel과 <strong>데이터 바인딩</strong>을 통해 UI 업데이트</li><li>버튼 클릭, 입력 등의 <strong>사용자 이벤트를 ViewModel로 전달</strong></li></ul></li><li><p><strong>ViewModel (뷰모델)</strong></p><ul><li>UI와 Model 사이의 <strong>중개 역할</strong></li><li><strong>Presentation Logic</strong>을 처리하여 Model과 View를 연결</li><li><strong>Command 패턴을 통해 사용자 이벤트를 처리</strong></li></ul></li><li><p><strong>Model (모델)</strong></p><ul><li><strong>비즈니스 로직(Business Logic)과 데이터 모델(Data Model) 포함</strong></li><li><strong>웹 API 서버와의 데이터 동기화 및 로직 처리</strong></li><li>변경 사항이 발생하면 <strong>ViewModel에 알림(Notify) 제공</strong></li></ul></li></ul><hr><h3 id="✨-mataju-mvvm의-장점" tabindex="-1">✨ <strong>Mataju MVVM의 장점</strong> <a class="header-anchor" href="#✨-mataju-mvvm의-장점" aria-label="Permalink to &quot;✨ **Mataju MVVM의 장점**&quot;">​</a></h3><p>✅ <strong>UI와 로직을 분리하여 유지보수성 향상</strong><br> ✅ <strong>데이터 바인딩을 활용한 동적인 UI 업데이트</strong><br> ✅ <strong>ViewModel을 통해 비즈니스 로직과 UI의 독립성 확보</strong><br> ✅ <strong>Command 패턴을 활용한 깔끔한 이벤트 처리</strong><br> ✅ <strong>웹 API와 연결된 구조로 데이터 흐름을 명확하게 관리</strong></p><hr><h3 id="mataju-랜딩페이지" tabindex="-1"><strong>Mataju 랜딩페이지</strong> <a class="header-anchor" href="#mataju-랜딩페이지" aria-label="Permalink to &quot;**Mataju 랜딩페이지**&quot;">​</a></h3><p><img src="'+u+'" alt="Mataju 랜딩페이지"></p>',12))])}const b=r(g,[["render",m]]);export{V as __pageData,b as default};
