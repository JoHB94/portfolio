import{_ as r,c as o,o as n,ab as d}from"./chunks/framework.Dsgp4YlQ.js";const s="/portfolio/images/visionAI.png",b=JSON.parse('{"title":"🤖 오픈소스 기반 AI품질 검사","description":"","frontmatter":{},"headers":[],"relativePath":"MSD/MSDVision/visionAi.md","filePath":"MSD/MSDVision/visionAi.md","lastUpdated":null}'),e={name:"MSD/MSDVision/visionAi.md"};function a(i,t,g,h,l,c){return n(),o("div",null,t[0]||(t[0]=[d('<h1 id="🤖-오픈소스-기반-ai품질-검사" tabindex="-1">🤖 오픈소스 기반 AI품질 검사 <a class="header-anchor" href="#🤖-오픈소스-기반-ai품질-검사" aria-label="Permalink to &quot;🤖 오픈소스 기반 AI품질 검사&quot;">​</a></h1><p><img src="'+s+'" alt="판독"> 스마트 팩토리의 품질 관리는 <strong>정확성, 속도, 확장성</strong>이 중요한 요소입니다.<br> MSDVision은 <strong>ONNX 모델과 C# 기반 오픈 소스 라이브러리</strong>를 활용하여 기존 솔루션 대비 강력한 성능과 유연성을 제공합니다.</p><hr><h1 id="🧠-ai-모델-구조-및-처리-과정" tabindex="-1">🧠 AI 모델 구조 및 처리 과정 <a class="header-anchor" href="#🧠-ai-모델-구조-및-처리-과정" aria-label="Permalink to &quot;🧠 AI 모델 구조 및 처리 과정&quot;">​</a></h1><p>MSDVision의 AI 품질 검사 모델은 <strong>이미지 전처리 → ONNX 모델 추론 → 후처리 및 결과 출력</strong>의 단계를 거칩니다.<br> 본 문서에서는 <strong>핵심 개념</strong>을 설명하고, 전체 코드는 <a href="https://github.com/JoHB94/VP_QM_winform/blob/main/Controller/VisionController.cs" target="_blank" rel="noreferrer">GitHub</a>에서 확인할 수 있습니다.</p><h2 id="_1️⃣-ai-모델의-전체-흐름" tabindex="-1"><strong>1️⃣ AI 모델의 전체 흐름</strong> <a class="header-anchor" href="#_1️⃣-ai-모델의-전체-흐름" aria-label="Permalink to &quot;**1️⃣ AI 모델의 전체 흐름**&quot;">​</a></h2><table><thead><tr><th>🔹 처리 단계</th><th>📌 설명</th></tr></thead><tbody><tr><td><strong>이미지 입력</strong></td><td>카메라에서 이미지 수집</td></tr><tr><td><strong>전처리 (크기 변경, 정규화)</strong></td><td>OpenCV를 활용하여 크기 조정, RGB 변환, 정규화 수행</td></tr><tr><td><strong>ONNX 모델 추론</strong></td><td>ONNX Runtime을 사용하여 AI 모델 실행</td></tr><tr><td><strong>후처리 (Bounding Box, 신뢰도 필터링)</strong></td><td>예측된 결과를 실제 이미지 크기에 맞게 변환하고 신뢰도가 낮은 객체 제거</td></tr><tr><td><strong>정상 제품 처리</strong></td><td>제품이 정상으로 판별되면 생산 공정 지속</td></tr><tr><td><strong>불량 제품 처리</strong></td><td>불량이 감지되면 MQTT브로커에 메세지 발행 및 품질 관리 시스템 연계</td></tr><tr><td><strong>MES/SCADA 데이터 전송</strong></td><td>품질 검사 결과를 데이터베이스 및 MES 시스템에 기록</td></tr></tbody></table><hr><h2 id="_2️⃣-전처리-preprocessing" tabindex="-1"><strong>2️⃣ 전처리 (Preprocessing)</strong> <a class="header-anchor" href="#_2️⃣-전처리-preprocessing" aria-label="Permalink to &quot;**2️⃣ 전처리 (Preprocessing)**&quot;">​</a></h2><table><thead><tr><th>🔹 처리 단계</th><th>📌 설명</th></tr></thead><tbody><tr><td><strong>이미지 크기 조정</strong></td><td>입력 이미지를 <code>640x640</code> 크기로 리사이징</td></tr><tr><td><strong>색상 변환 (BGR → RGB)</strong></td><td>OpenCV를 사용하여 BGR에서 RGB로 변환</td></tr><tr><td><strong>정규화 (0~1 범위로 스케일링)</strong></td><td>픽셀 값을 <code>255</code>로 나누어 정규화</td></tr><tr><td><strong>채널 순서 변환 (HWC → CHW)</strong></td><td>모델 입력 형식에 맞게 변환</td></tr></tbody></table><hr><h2 id="_3️⃣-후처리-postprocessing" tabindex="-1"><strong>3️⃣ 후처리 (Postprocessing)</strong> <a class="header-anchor" href="#_3️⃣-후처리-postprocessing" aria-label="Permalink to &quot;**3️⃣ 후처리 (Postprocessing)**&quot;">​</a></h2><table><thead><tr><th>🔹 처리 단계</th><th>📌 설명</th></tr></thead><tbody><tr><td><strong>Bounding Box 좌표 변환</strong></td><td>모델이 예측한 좌표를 실제 이미지 크기에 맞게 변환</td></tr><tr><td><strong>Confidence 필터링</strong></td><td>신뢰도가 <code>0.5</code> 미만인 객체는 제거</td></tr><tr><td><strong>클래스별 최적 박스 선택</strong></td><td>가장 높은 신뢰도를 가진 바운딩 박스 유지</td></tr><tr><td><strong>불량 판정 및 표시</strong></td><td>&quot;good&quot;이면 정상, 그 외는 불량으로 판단</td></tr><tr><td><strong>결과 이미지 저장</strong></td><td>OpenCV를 사용하여 결과 이미지 생성 및 저장</td></tr></tbody></table><hr>',14)]))}const u=r(e,[["render",a]]);export{b as __pageData,u as default};
